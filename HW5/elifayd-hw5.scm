(define if-statement? (lambda (e)
        (and (list? e) 
		(equal? (car e) 'if) 
		(= (length e) 4))
	)
)

(define conditional-list? (lambda (e)
        (if (null? e)
                #f
                (if (and (list? (car e)) (= (length (car e)) 2))
                        (if (equal? (caar e) 'else)
                                (if (null? (cdr e))
                                        #t
                                        #f
                                )
                                (conditional-list? (cdr e))
                        )
                        #f
                )
        )
    )
)

(define condition-statement?
        (lambda (e)
                (and (list? e) 
        (equal? (car e) 'cond) 
        (> (length e) 2) 
        (conditional-list? (cdr e)))
        )
)

(define var_bind_list? (lambda (e)
        (and (list? e) 
            (list? (car e)) 
            (= (length (car e)) 2) 
            (symbol? (caar e))
            (or (null? (cdr e)) 
            (var_bind_list? (cdr e)))
        )
    )
)

(define let-satement? (lambda (e)
        (and (list? e)
            (equal? (car e) 'let) 
            (or (equal? () (cadr e)) 
            (var_bind_list? (cadr e))) 
            (= (length e) 3)
        )
    )
)


(define letstar-statement? (lambda (e)
        ( and (list? e) 
        (equal? (car e) 'let*) 
        (= (length e) 3) )
    )
)

(define get-operator (lambda (o)
    (cond
        ((equal? o '+) +)
        ((equal? o '-) -)
        ((equal? o '*) *)
        ((equal? o '/) /)
        (else #f))
    )
)

(define get-operator? (lambda (o)
    (cond
        ((equal? o '+) #t)
        ((equal? o '-) #t)
        ((equal? o '*) #t)
        ((equal? o '/) #t)
        (else #f))
    ) 
)

(define define-stmt? (lambda (e)
        (and (list? e) 
        (= (length e) 3) 
        (equal? (car e) 'define) 
        (symbol? (cadr e))
        )
))

(define get-value (lambda (var env)
        (cond
            ((null? env) (let*
                (
                (dummy1 (display "cs305: ERROR"))
                (dummy2 (newline))
                (dummy3 (newline))
                )
                (repl env)
            ))
            ((equal? var (caar env)) (cdar env))
            (else (get-value var (cdr env)))
        )
   )
)

(define extend-env (lambda (var val old-env)
      (cons (cons var val) old-env)))

(define repl (lambda (env)
    (let* (
            (dummy1 (display "cs305> "))
            (expr (read))
            (new-env 
            (if (define-stmt? expr)
                (extend-env (cadr expr) (s7-interpret (caddr expr) env) env)
                        env)
            )
            (val (if (define-stmt? expr)
                    (cadr expr)
                    (s7-interpret expr env)))
            (dummy2 (display "cs305: "))
            (dummy3 (display val))
            (dummy4 (newline))
            (dummy5 (newline)))
        (repl new-env))
    )
)

(define s7-interpret (lambda (e env)
    (cond
        ((null? e) e)
        ((number? e) e)
        ((symbol? e) (get-value e env))
        ((not (list? e)) "ERROR")
        ((if-statement? e) 
        (if (eq? (s7-interpret (cadr e ) env) 0)
                (s7-interpret (cadddr e) env)
                    (s7-interpret (caddr e) env)
        )
        )
        ((condition-statement? e)
            (if (eq? (length e) 3)
                    (if (eq? (s7-interpret (caadr e) env) 0)
                            (s7-interpret (car (cdaddr e)) env)
                            (s7-interpret (cadadr e) env)
                    )
                    (let ((condition (caadr e)) (then (cadadr e)) (elsebinding (cons 'cond (cddr e))) )
                    (let ((tempvar (list 'if condition then elsebinding))) (s7-interpret tempvar env))
            )
            )
        )
        ((let-satement? e)
            (let*
                ((members (map s7-interpret (map cadr (cadr e)) (make-list (length (map cadr (cadr e))) env)))
                (addedenv (append ( map cons (map car (cadr e)) members) env)))
                (s7-interpret (caddr e) addedenv)))

        ((letstar-statement? e)
                (cond
                    ((eq? (length (cadr e)) 0) (s7-interpret (list 'let '() (caddr e)) env))
                    ((eq? (length (cadr e)) 1) (s7-interpret (list 'let (cadr e) (caddr e)) env))
                    (else
                        (let*
                                ((partymemb (s7-interpret (car (cdaadr e)) env))
                                (addedenv (cons (cons (caaadr e) partymemb) env)))
                                (s7-interpret (list 'let* (cdadr e) (caddr e)) addedenv)))))
        ((get-operator(car e))
        (let ((operands (map s7-interpret (cdr e) (make-list (length (cdr e)) env)))
                (operator (get-operator (car e))))
            (apply operator operands)))
        (else "ERROR" ))
    )
)

(define cs305 (lambda () (repl '())))